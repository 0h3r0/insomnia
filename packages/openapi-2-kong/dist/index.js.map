{"version":3,"sources":["common.js","security-plugins.js","plugins.js","services.js","upstreams.js","index.js"],"names":["parseSpec","spec","api","JSON","parse","err","SwaggerParser","YAML","stringify","info","openapi","dereference","getServers","obj","servers","getAllServers","p","Object","keys","paths","server","push","getSecurity","security","getName","name","generateSlug","title","str","replace","pathVariablesToRegex","result","parseUrl","urlStr","parsed","url","port","protocol","host","hostname","fillServerVariables","finalUrl","variables","defaultValue","default","Error","joinPath","p1","p2","generateSecurityPlugins","op","plugins","securitySchemes","components","securityItem","scheme","generateSecurityPlugin","generateApiKeySecurityPlugin","includes","in","type","config","key_names","generateHttpSecurityPlugin","generateOpenIdConnectSecurityPlugin","args","openIdConnectUrl","issuer","scopes_required","generateOAuth2SecurityPlugin","auth_methods","plugin","key","indexOf","kongSecurity","generatePlugins","operation","generatePlugin","match","generateRequestValidatorPlugin","version","parameters","schema","parameter_schema","explode","required","style","requestBody","content","bodySchema","item","mediatype","body_schema","enabled","generateServices","tags","length","generateService","pathname","service","path","parseInt","routes","routePath","pathItem","method","fullPath","fullPathRegex","route","generateRouteName","methods","toUpperCase","strip_path","securityPlugins","numRoutes","n","summary","generateUpstreams","upstream","targets","target","generate","specPath","Promise","resolve","reject","readFile","contents","fileSlug","allTags","basename","generateFromString","specStr","generateFromSpec","_format_version","services","upstreams","message"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["// @flow\nimport SwaggerParser from 'swagger-parser';\nimport url from 'url';\n\nexport async function parseSpec(spec: string | Object): Promise<OpenApi3Spec> {\n  let api: OpenApi3Spec;\n\n  if (typeof spec === 'string') {\n    try {\n      api = JSON.parse(spec);\n    } catch (err) {\n      api = SwaggerParser.YAML.parse(spec);\n    }\n  } else {\n    api = JSON.parse(JSON.stringify(spec));\n  }\n\n  // Ensure it has some required properties to make parsing\n  // a bit less strict\n\n  if (!api.info) {\n    api.info = {};\n  }\n\n  if (api.openapi === '3.0') {\n    api.openapi = '3.0.0';\n  }\n\n  return SwaggerParser.dereference(api);\n}\n\nexport function getServers(obj: OpenApi3Spec | OA3PathItem): Array<OA3Server> {\n  return obj.servers || [];\n}\n\nexport function getAllServers(api: OpenApi3Spec): Array<OA3Server> {\n  const servers = getServers(api);\n\n  for (const p of Object.keys(api.paths)) {\n    for (const server of getServers(api.paths[p])) {\n      servers.push(server);\n    }\n  }\n\n  return servers;\n}\n\nexport function getSecurity(\n  obj: OpenApi3Spec | OA3Operation,\n): Array<OA3SecurityRequirement> | null {\n  return obj.security || [];\n}\n\nexport function getName(obj: OpenApi3Spec | OA3Operation): string {\n  let name;\n\n  if ((obj: any)['x-kong-name']) {\n    name = (obj: any)['x-kong-name'];\n  }\n\n  if (!name && obj.info && obj.info.title) {\n    name = obj.info.title;\n  }\n\n  return generateSlug(name || 'openapi');\n}\n\nexport function generateSlug(str: string): string {\n  return str.replace(/[\\s_\\-.~,]/g, '_');\n}\n\nexport function pathVariablesToRegex(p: string): string {\n  const result = p.replace(/{([^}]+)}/g, '(?<$1>\\\\S+)');\n  if (result === p) {\n    return result;\n  }\n\n  // If anything was replaced, it's a regex, so add a line-ending match\n  return result + '$';\n}\n\nexport function parseUrl(\n  urlStr: string,\n): {|\n  host: string,\n  port: string,\n  protocol: string,\n  pathname: string,\n|} {\n  const parsed: Object = url.parse(urlStr);\n\n  if (!parsed.port && parsed.protocol === 'https:') {\n    parsed.port = '443';\n  } else if (!parsed.port && parsed.protocol === 'http:') {\n    parsed.port = '80';\n  }\n\n  parsed.protocol = parsed.protocol || 'http:';\n  parsed.host = `${parsed.hostname}:${parsed.port}`;\n\n  return parsed;\n}\n\nexport function fillServerVariables(server: OA3Server): string {\n  let finalUrl = server.url;\n\n  const variables = server.variables || {};\n\n  for (const name of Object.keys(variables)) {\n    const defaultValue = variables[name].default;\n    if (!defaultValue) {\n      throw new Error(`Server variable \"${name}\" missing default value`);\n    }\n\n    finalUrl = finalUrl.replace(`{${name}}`, defaultValue);\n  }\n\n  return finalUrl;\n}\n\nexport function joinPath(p1: string, p2: string): string {\n  p1 = p1.replace(/\\/$/, '');\n  p2 = p2.replace(/^\\//, '');\n\n  return `${p1}/${p2}`;\n}\n","// @flow\n\nimport { getSecurity } from './common';\n\nexport function generateSecurityPlugins(op: OA3Operation, api: OpenApi3Spec): Array<DCPlugin> {\n  const plugins = [];\n  const components = api.components || {};\n  const securitySchemes = components.securitySchemes || {};\n\n  const security = getSecurity(op) || getSecurity(api) || [];\n  for (const securityItem of security) {\n    for (const name of Object.keys(securityItem)) {\n      const scheme: OA3SecurityScheme = securitySchemes[name] || {};\n      const args = securityItem[name];\n\n      const p = generateSecurityPlugin(scheme, args);\n\n      if (p) {\n        plugins.push(p);\n      }\n    }\n  }\n\n  return plugins;\n}\n\nexport function generateApiKeySecurityPlugin(scheme: OA3SecuritySchemeApiKey): DCPlugin {\n  if (!['query', 'header', 'cookie'].includes(scheme.in)) {\n    throw new Error(`a ${scheme.type} object expects valid \"in\" property. Got ${scheme.in}`);\n  }\n  if (!scheme.name) {\n    throw new Error(`a ${scheme.type} object expects valid \"name\" property. Got ${scheme.name}`);\n  }\n\n  return {\n    name: 'key-auth',\n    config: { key_names: [scheme.name] },\n  };\n}\n\nexport function generateHttpSecurityPlugin(scheme: OA3SecuritySchemeHttp): DCPlugin {\n  if (scheme.scheme !== 'basic') {\n    throw new Error(`Only \"basic\" http scheme supported. got ${scheme.scheme}`);\n  }\n\n  return {\n    name: 'basic-auth',\n    config: {},\n  };\n}\n\nexport function generateOpenIdConnectSecurityPlugin(\n  scheme: OA3SecuritySchemeOpenIdConnect,\n  args: Array<any>,\n): DCPlugin {\n  if (!scheme.openIdConnectUrl) {\n    throw new Error(`invalid \"openIdConnectUrl\" property. Got ${scheme.openIdConnectUrl}`);\n  }\n\n  return {\n    name: 'openid-connect',\n    config: {\n      issuer: scheme.openIdConnectUrl,\n      scopes_required: args || [],\n    },\n  };\n}\n\nexport function generateOAuth2SecurityPlugin(\n  scheme: OA3SecuritySchemeOAuth2,\n  args: ?Array<any>,\n): DCPlugin {\n  return {\n    config: {\n      auth_methods: ['client_credentials'],\n    },\n    name: 'openid-connect',\n  };\n}\n\nexport function generateSecurityPlugin(\n  scheme: OA3SecurityScheme,\n  args: Array<any>,\n): DCPlugin | null {\n  let plugin: DCPlugin | null = null;\n\n  // Generate base plugin\n  if (scheme.type === 'apiKey') {\n    plugin = generateApiKeySecurityPlugin(scheme);\n  } else if (scheme.type === 'http') {\n    plugin = generateHttpSecurityPlugin(scheme);\n  } else if (scheme.type === 'openIdConnect') {\n    plugin = generateOpenIdConnectSecurityPlugin(scheme, args);\n  } else if (scheme.type === 'oauth2') {\n    plugin = generateOAuth2SecurityPlugin(scheme);\n  } else {\n    return null;\n  }\n\n  // Add additional plugin configuration from x-kong-* properties\n  for (const key of Object.keys((scheme: Object))) {\n    if (key.indexOf('x-kong-security-') !== 0) {\n      continue;\n    }\n\n    const kongSecurity = scheme[key];\n\n    if (kongSecurity.config) {\n      plugin.config = kongSecurity.config;\n    }\n  }\n\n  return plugin;\n}\n","// @flow\n\nexport function generatePlugins(operation: OA3Operation): Array<DCPlugin> {\n  const plugins: Array<DCPlugin> = [];\n  for (const key of Object.keys(operation)) {\n    if (key.indexOf('x-kong-plugin-') !== 0) {\n      continue;\n    }\n\n    plugins.push(generatePlugin(key, operation[key], operation));\n  }\n\n  return plugins;\n}\n\nexport function generatePlugin(key: string, obj: Object, operation: OA3Operation): DCPlugin {\n  if (key.match(/-request-validator$/)) {\n    return generateRequestValidatorPlugin(obj, operation);\n  }\n\n  const plugin: DCPlugin = {\n    name: obj.name || key.replace(/^x-kong-plugin-/, ''),\n  };\n\n  if (obj.config) {\n    plugin.config = obj.config;\n  }\n\n  return plugin;\n}\n\nexport function generateRequestValidatorPlugin(obj: Object, operation: OA3Operation): DCPlugin {\n  const config: { [string]: Object } = {\n    version: 'draft4', // Fixed version\n  };\n\n  config.parameter_schema = [];\n\n  if (operation.parameters) {\n    for (const p of operation.parameters) {\n      if (!(p: Object).schema) {\n        throw new Error(\"Parameter using 'content' type validation is not supported\");\n      }\n      config.parameter_schema.push({\n        in: (p: Object).in,\n        explode: !!(p: Object).explode,\n        required: !!(p: Object).required,\n        name: (p: Object).name,\n        schema: JSON.stringify((p: Object).schema),\n        style: 'simple',\n      });\n    }\n  }\n\n  if (operation.requestBody) {\n    const content = (operation.requestBody: Object).content;\n    if (!content) {\n      throw new Error('content property is missing for request-validator!');\n    }\n\n    let bodySchema;\n    for (const item of content) {\n      if (item.mediatype !== 'application/json') {\n        throw new Error(`Body validation supports only 'application/json', not ${item.mediatype}`);\n      }\n\n      bodySchema = JSON.stringify(item.schema);\n    }\n\n    if (bodySchema) {\n      config.body_schema = bodySchema;\n    }\n  }\n\n  return {\n    config,\n    enabled: true,\n    name: 'request-validator',\n  };\n}\n","// @flow\n\nimport {\n  fillServerVariables,\n  generateSlug,\n  getAllServers,\n  getName,\n  joinPath,\n  parseUrl,\n  pathVariablesToRegex,\n} from './common';\n\nimport { generateSecurityPlugins } from './security-plugins';\nimport { generatePlugins } from './plugins';\n\nexport function generateServices(api: OpenApi3Spec, tags: Array<string>): Array<DCService> {\n  const servers = getAllServers(api);\n\n  if (servers.length === 0) {\n    throw new Error('no servers defined in spec');\n  }\n\n  // only support one service for now\n  const service = generateService(servers[0], api, tags);\n  return [service];\n}\n\nexport function generateService(\n  server: OA3Server,\n  api: OpenApi3Spec,\n  tags: Array<string>,\n): DCService {\n  const { pathname, protocol, port } = parseUrl(fillServerVariables(server));\n\n  const name = getName(api);\n  const service: DCService = {\n    name,\n    path: '/',\n    port: parseInt(port),\n    protocol: protocol.replace(':', ''),\n    routes: [],\n    tags,\n\n    // I'm not sure why host is set to name, but it came from the openapi2kong Lua repo\n    // https://github.com/Kong/openapi2kong/blob/078be111a9ced6040e77c635161a1161053055e0/src/openapi2kong/init.lua#L218\n    host: name,\n  };\n\n  for (const routePath of Object.keys(api.paths)) {\n    const pathItem: OA3PathItem = api.paths[routePath];\n\n    for (const method of Object.keys(pathItem)) {\n      if (\n        method !== 'get' &&\n        method !== 'put' &&\n        method !== 'post' &&\n        method !== 'delete' &&\n        method !== 'options' &&\n        method !== 'head' &&\n        method !== 'patch' &&\n        method !== 'trace'\n      ) {\n        continue;\n      }\n\n      const operation: ?OA3Operation = pathItem[method];\n\n      // This check is here to make Flow happy\n      if (!operation) {\n        continue;\n      }\n\n      // Create the base route object\n      const fullPath = joinPath(pathname, routePath);\n      const fullPathRegex = pathVariablesToRegex(fullPath);\n      const route: DCRoute = {\n        tags,\n        name: generateRouteName(api, pathItem, method, service.routes.length),\n        methods: [method.toUpperCase()],\n        paths: [fullPathRegex],\n        strip_path: false,\n      };\n\n      // Generate generic and security-related plugin objects\n      const securityPlugins = generateSecurityPlugins(operation, api);\n      const regularPlugins = generatePlugins(operation);\n      const plugins = [...regularPlugins, ...securityPlugins];\n\n      // Add plugins if there are any\n      if (plugins.length) {\n        route.plugins = plugins;\n      }\n\n      service.routes.push(route);\n    }\n  }\n\n  return service;\n}\n\nexport function generateRouteName(\n  api: OpenApi3Spec,\n  pathItem: OA3PathItem,\n  method: string,\n  numRoutes: number,\n): string {\n  const n = numRoutes;\n  const name = getName(api);\n\n  if (typeof (pathItem: Object)['x-kong-name'] === 'string') {\n    const pathSlug = generateSlug((pathItem: Object)['x-kong-name']);\n    return `${name}-${pathSlug}-${method}`;\n  }\n\n  // If a summary key exists, use that to generate the name\n  if (typeof pathItem.summary === 'string') {\n    const pathSlug = generateSlug(pathItem.summary);\n    return `${name}-${pathSlug}-${method}`;\n  }\n\n  // otherwise, use a unique integer to prevent collisions\n  return `${generateSlug(name)}-path${n ? '_' + n : ''}-${method}`;\n}\n","// @flow\n\nimport { getName, parseUrl } from './common';\n\nexport function generateUpstreams(api: OpenApi3Spec, tags: Array<string>) {\n  const servers = api.servers || [];\n\n  if (servers.length === 0) {\n    return [];\n  }\n\n  const upstream: DCUpstream = {\n    name: getName(api),\n    targets: [],\n    tags,\n  };\n\n  for (const server of servers) {\n    upstream.targets.push({\n      target: parseUrl(server.url).host,\n    });\n  }\n\n  return [upstream];\n}\n","// @flow\nimport fs from 'fs';\nimport path from 'path';\nimport { parseSpec } from './common';\nimport { generateServices } from './services';\nimport { generateUpstreams } from './upstreams';\n\nexport async function generate(specPath: string, tags: Array<string> = []): Promise<Object> {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path.resolve(specPath), 'utf8', (err, contents) => {\n      if (err != null) {\n        reject(err);\n        return;\n      }\n\n      const fileSlug = path.basename(specPath);\n      const allTags = [`OAS3file_${fileSlug}`, ...tags];\n      resolve(generateFromString(contents, allTags));\n    });\n  });\n}\n\nexport async function generateFromString(\n  specStr: string,\n  tags: Array<string> = [],\n): Promise<DeclarativeConfig> {\n  const api: OpenApi3Spec = await parseSpec(specStr);\n  return generateFromSpec(api, ['OAS3_import', ...tags]);\n}\n\nexport function generateFromSpec(\n  api: OpenApi3Spec,\n  tags: Array<string> = [],\n): DeclarativeConfig {\n  let result = null;\n  try {\n     result = {\n      _format_version: '1.1',\n      services: generateServices(api, tags),\n      upstreams: generateUpstreams(api, tags),\n    };\n  } catch (err) {\n    throw new Error('Failed to generate spec: ' + err.message);\n  }\n\n  // This remover any circular references or weirdness that might result\n  // from the JS objects used.\n  // SEE: https://github.com/Kong/studio/issues/93\n  return JSON.parse(JSON.stringify(result));\n}\n"]}